2017-08-08 00:00:14,461 : Removing: 2017-08-07-tmap_aligner.md
2017-08-08 00:00:14,461 : Entering Front Matter class
2017-08-08 00:00:14,462 : Front matter field: date value 2017-08-08
2017-08-08 00:00:14,462 : Front matter field: title value TMAP: Torrent Mapping Alignment Program
2017-08-08 00:00:14,462 : Front matter field: categories value Example Applet
2017-08-08 00:00:14,463 : front matter written
2017-08-08 00:00:14,464 : Code region search
2017-08-08 00:00:14,464 : regular comment, line: #!/bin/bash
2017-08-08 00:00:14,464 : regular comment, line: # tmap_scatter_gather 1.0.0
2017-08-08 00:00:14,464 : regular comment, line: # Generated by dx-app-wizard.
2017-08-08 00:00:14,464 : regular comment, line: #
2017-08-08 00:00:14,465 : regular comment, line: # Scatter-process-gather execution pattern: Your app will split its
2017-08-08 00:00:14,465 : regular comment, line: # input into multiple pieces, each of which will be processed in
2017-08-08 00:00:14,465 : regular comment, line: # parallel, after which they are gathered together in some final
2017-08-08 00:00:14,465 : regular comment, line: # output.
2017-08-08 00:00:14,466 : regular comment, line: #
2017-08-08 00:00:14,466 : regular comment, line: # This pattern is very similar to the "parallelized" template.  What
2017-08-08 00:00:14,466 : regular comment, line: # it does differently is that it formally breaks out the "scatter"
2017-08-08 00:00:14,466 : regular comment, line: # phase as a separate black-box entry point in the app.  (As a side
2017-08-08 00:00:14,466 : regular comment, line: # effect, this requires a "map" entry point to call "process" on each
2017-08-08 00:00:14,466 : regular comment, line: # of the results from the "scatter" phase.)
2017-08-08 00:00:14,467 : regular comment, line: #
2017-08-08 00:00:14,467 : regular comment, line: # Note that you can also replace any entry point in this execution
2017-08-08 00:00:14,467 : regular comment, line: # pattern with an API call to run a separate app or applet.
2017-08-08 00:00:14,467 : regular comment, line: #
2017-08-08 00:00:14,467 : regular comment, line: # The following is a Unicode art picture of the flow of execution.
2017-08-08 00:00:14,467 : regular comment, line: # Each box is an entry point, and vertical lines indicate that the
2017-08-08 00:00:14,467 : regular comment, line: # entry point connected at the top of the line calls the entry point
2017-08-08 00:00:14,468 : regular comment, line: # connected at the bottom of the line.  The letters represent the
2017-08-08 00:00:14,468 : regular comment, line: # different stages in which the input is transformed, e.g. the output
2017-08-08 00:00:14,468 : regular comment, line: # of the "scatter" entry point ("array:B") is given to the "map" entry
2017-08-08 00:00:14,468 : regular comment, line: # point as input.  The "map" entry point calls as many "process" entry
2017-08-08 00:00:14,469 : regular comment, line: # points as there are elements in its array input and gathers the
2017-08-08 00:00:14,469 : regular comment, line: # results in its array output.
2017-08-08 00:00:14,469 : regular comment, line: #
2017-08-08 00:00:14,469 : regular comment, line: #          ┌──────┐
2017-08-08 00:00:14,469 : regular comment, line: #       A->│ main │->D (output from "postprocess")
2017-08-08 00:00:14,470 : regular comment, line: #          └┬─┬─┬─┘
2017-08-08 00:00:14,470 : regular comment, line: #           │ │ │
2017-08-08 00:00:14,470 : regular comment, line: #          ┌┴──────┐
2017-08-08 00:00:14,470 : regular comment, line: #       A->│scatter│->array:B
2017-08-08 00:00:14,470 : regular comment, line: #          └───────┘
2017-08-08 00:00:14,470 : regular comment, line: #             │ │
2017-08-08 00:00:14,471 : regular comment, line: #            ┌┴──────────────┐
2017-08-08 00:00:14,471 : regular comment, line: #   array:B->│      map      │->array:C
2017-08-08 00:00:14,471 : regular comment, line: #            └─────────┬─┬─┬─┘
2017-08-08 00:00:14,471 : regular comment, line: #               │      │ . .
2017-08-08 00:00:14,471 : regular comment, line: #               │     ┌┴──────┐
2017-08-08 00:00:14,471 : regular comment, line: #               │  B->│process│->C
2017-08-08 00:00:14,472 : regular comment, line: #               │     └───────┘
2017-08-08 00:00:14,472 : regular comment, line: #            ┌──┴────────┐
2017-08-08 00:00:14,472 : regular comment, line: #   array:C->│postprocess│->D
2017-08-08 00:00:14,472 : regular comment, line: #            └───────────┘
2017-08-08 00:00:14,472 : regular comment, line: #
2017-08-08 00:00:14,472 : regular comment, line: # A = original app input, split up by "scatter" into pieces of type B
2017-08-08 00:00:14,473 : regular comment, line: # B = an input that will be provided to a "process" entry point
2017-08-08 00:00:14,473 : regular comment, line: # C = the output of a "process" entry point
2017-08-08 00:00:14,473 : regular comment, line: # D = app output aggregated from the outputs of the "process" entry points
2017-08-08 00:00:14,473 : regular comment, line: #
2017-08-08 00:00:14,473 : regular comment, line: # See http://wiki.dnanexus.com/Developer-Portal for documentation and
2017-08-08 00:00:14,473 : regular comment, line: # tutorials on how to modify this file.
2017-08-08 00:00:14,473 : regular comment, line: # The following line(s) use the dx command-line tool to download your file
2017-08-08 00:00:14,474 : regular comment, line: # inputs to the local file system using variable names for the filenames. To
2017-08-08 00:00:14,474 : regular comment, line: # recover the original filenames, you can use the output of "dx describe
2017-08-08 00:00:14,474 : regular comment, line: # "$variable" --name".
2017-08-08 00:00:14,474 : regular comment, line: #eval process_args=("$process_inputs")
2017-08-08 00:00:14,475 : regular comment, line: # Fill in code here to process the input and create output.
2017-08-08 00:00:14,475 : Creating code regions
